Classes:

Class Transaction(senderID, receiverID, amount, Type)
Variables:
    Sender
    Receiver
    TransactionType System, User, CA
    Signature
    Time and Date of Creation
    Hash

Functions:
    getHash()
    receiveSignature(Signature)
    verifyTransaction(Key publicKey) {verify Signature}
    
User creates transaction -> Generate Hash -> Sign Hash with Private Key -> Verify that the Private Key matches the Public Key of the Sender

Class Block():
Variables:
    List of Transactions
    Hash of the previous Block
    Nonce
    Date and Time
    Hash

Functions:
    Mine()/GenerateHash()
    addTransaction(Node)


Class Node
Variables:
    ReadyTransactions[] // Ready transactions can be moved to the next block
    PendingCATransactions[]

Functions:
    addTransaction()
        Perform signature verification? Accept it : Reject it
        Check TransactionType -> Move to Ready or PendingCATransactions
    getReadyTransactions()
        check pending transactions from CA and add to Ready
        return ready transactions
    rejectTransaction() // Reject a pending transaction from the CA by the sender


Class Blockchain
Variables:
    Blocks[]

Functions:
    getHeadHash()
    addBlock(Block) 
        Check Block.hash calculation
        Send email to tx.Sender;

Class Users
Variables:
    Wallet
    userID = publicKey
    SSN/Identifying ID

Functions:
    generateKeyPair()


Class Central Authority
Variables:
    List of Users and their SSN

Functions:
    generateTransaction(User Sender, User Receiver, SenderInfo) // called by a User
    registerNewUser(PublicKey, SSN) {Add(user to list of users)}

    Sign(publicKey of User, CAPrivateKey) -> User  


Class Wallet(PrivateKey)
Variables:
    privateKey
    publicKey = userID

Functions:
    generateTransaction(receiverID, amount) // Called by the user, Type=User
    generateSignature(Hash)



Setup and test 

/*
------------------- Blockchain Setup -------------------
*/

DACoinNode = new Node
DACoin = new Blockchain
GenisisBlock = new Block[randomTransaction = new Transaction]

GenisisBlock.mine()

DACoin.addBlock(GenisisBlock)

CA = new CA

/*
------------------- User Creation -------------------
*/

David = new User
Alex = new User

David.createWallet
Alex.createWallet

CA.registerUser(David)
CA.registerUser(Alex)

/*
------------------- Transactions -------------------
*/

David.createTransaction(to:Alex, amount:50)
    Node.addTrasaction(new Transaction)

Alex.createTransaction(to:David, amount:20)
    Node.addTrasaction(new Transaction)

/*
------------------- Mining -------------------
*/
block1 = new Block()
block1.addTrasactionsFromNode()

block1.calculateHash()

if hashFound()  
    DACoin.addBlock(block1)

console.log(DACoin.verifyBlockchain())
